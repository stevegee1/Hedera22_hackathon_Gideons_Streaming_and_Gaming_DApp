//this contract handles the revenue that will be generated by the league
//15% in USDC of the revenue will be for the address(owner of the contract)-Gideon DApp
//while 85% in USDC of the revenue will be sent to the league address

//The revenue will be generated but not limited to the following :
// *ticket fee
// *PPV(Pay-per-view) fee
// *ad fee

//SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;
import "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";

contract RevenueContract {
    address payable leagueAddressUSDC;
    address priceFeed;
    mapping(address => uint256) public addressToAmountFunded;
    address[] public voters;
    address public owner;
    AggregatorV3Interface public priceFeed;

    constructor(address payable leagueAddressUSDC_, address priceFeed_) {
        address payable owner = msg.sender;
        leagueAddressUSDC = leagueAddressUSDC_;
        priceFeed = AggregatorV3Interface(_priceFeed);
    }

    function fund() public payable {
        uint256 minimumUSD = 50 * 10**18;
        require(
            getConversionRate(msg.value) >= minimumUSD,
            "You need to spend more ETH!"
        );
        addressToAmountFunded[msg.sender] += msg.value;
        voters.push(msg.sender);
    }

    function getPrice() public view returns (uint256) {
        (, int256 answer, , , ) = priceFeed.latestRoundData();
        return uint256(answer * 10000000000);
    }

    // 1000000000
    function getConversionRate(uint256 ethAmount)
        public
        view
        returns (uint256)
    {
        uint256 ethPrice = getPrice();
        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;
        return ethAmountInUsd;
    }

    function getEntranceFee() public view returns (uint256) {
        // minimumUSD
        uint256 minimumUSD = 50 * 10**18;
        uint256 price = getPrice();
        uint256 precision = 1 * 10**18;
        // return (minimumUSD * precision) / price;
        // We fixed a rounding error found in the video by adding one!
        return ((minimumUSD * precision) / price) + 1;
    }

    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    function withdraw() public payable onlyOwner {
        msg.sender.transfer(address(this).balance);
    }
}
